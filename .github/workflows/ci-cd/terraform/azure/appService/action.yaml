name: 'Terraform Azure AppService'
 
inputs:
  ENVIRONMENT:
    description: 'Environment Name'
    required: true
  AZURE_AD_CLIENT_ID:
    description: 'Azure Client Id'
    required: true
  AZURE_AD_CLIENT_SECRET:
    description: 'Azure Client Secret'
    required: true
  AZURE_AD_TENANT_ID:
    description: 'Azure Tenant Id'
    required: true
  AZURE_LOCATION:
    description: 'Azure Region/Location'
    required: true
  AZURE_SUBSCRIPTION_ID:
    description: 'Azure Subscription Id'
    required: true
  AZURE_RESOURCE_GROUP_NAME:
    description: 'Azure Resource Group Name'
    required: true
  AZURE_SERVICE_PLAN_NAME:
    description: 'Azure Service Plan nAME'
    required: true
  AZURE_STORAGE_ACCOUNT_NAME:
    description: 'Azure Storage Account Name'
    required: true

outputs:
  storage-account-access-key:
    description: "storage_account_access_key"
    value: ${{ steps.output.outputs.storage-account-access-key }}

runs:
    using: "composite"
    steps:
      # Checkout the repo
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Working Dir
        id: working-dir
        shell: bash
        run: echo ./.github/workflows/ci-cd/terraform/azure/appService

      # Terraform Setup 
      - uses: hashicorp/setup-terraform@v2

      # Terraform Format 
      - name: Terraform Format
        id: fmt
        shell: bash
        working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
        run: terraform fmt -check
        #continue-on-error: true

      # Terraform Init 
      - name: Terraform Init
        id: init
        shell: bash
        working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
        run: terraform init

      # Terraform Validate 
      - name: Terraform Validate
        id: validate
        shell: bash
        working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
        run: terraform validate -no-color

      # Terraform Plan 
      - name: Terraform Plan
        id: plan
        shell: bash
        working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
        run: terraform plan -no-color
        continue-on-error: true

      # Login to Azure with CLI with Federated with Github
      - name: 'Az CLI Login via OIDC'
        uses: azure/login@v1
        with:
          client-id: ${{ inputs.AZURE_AD_CLIENT_ID }}
          tenant-id: ${{ inputs.AZURE_AD_TENANT_ID }}
          subscription-id: ${{ inputs.AZURE_SUBSCRIPTION_ID }}

      # Terraform Apply
      - name: Terraform Apply
        id: apply
        shell: bash
        working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
        env:
          TF_CLI_ARGS_init: '-var="env=${{inputs.ENVIRONMENT}}" 
                            -var="tenant_id=${{inputs.AZURE_AD_TENANT_ID}}" 
                            -var="subscription_id=${{inputs.AZURE_SUBSCRIPTION_ID}}" 
                            -var="resource_group_name=${{inputs.AZURE_RESOURCE_GROUP_NAME}}" 
                            -var="location=${{inputs.AZURE_LOCATION}}" 
                            -var="service_plan_name=${{inputs.AZURE_SERVICE_PLAN_NAME}}" 
                            -var="storage_account_name=${{inputs.AZURE_STORAGE_ACCOUNT_NAME}}" 
                          '
        run: terraform apply -no-color
        continue-on-error: true

      # Terraform Output
      - name: Terraform Output
        id: output
        shell: bash
        working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
        run: |
          output=$(terraform output storage-account-access-key)
          echo $output
