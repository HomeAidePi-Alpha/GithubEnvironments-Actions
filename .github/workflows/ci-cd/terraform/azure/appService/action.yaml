name: 'Terraform Azure AppService'
 
inputs:
  ENVIRONMENT:
    description: 'Environment Name'
    required: true
  AZURE_AD_CLIENT_ID:
    description: 'Azure Client Id'
    required: true
  AZURE_AD_TENANT_ID:
    description: 'Azure Tenant Id'
    required: true
  AZURE_LOCATION:
    description: 'Azure Region/Location'
    required: true
  AZURE_SUBSCRIPTION_ID:
    description: 'Azure Subscription Id'
    required: true
  AZURE_RESOURCE_GROUP_NAME:
    description: 'Azure Resource Group Name'
    required: true
  AZURE_SERVICE_PLAN_ID:
    description: 'Azure Service Plan Id'
    required: true
  AZURE_STORAGE_ACCOUNT_NAME:
    description: 'Azure Storage Account Name'
    required: true

runs:
    using: "composite"
    env:
      ARM_CLIENT_ID: ${{ inputs.AZURE_AD_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ inputs.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ inputs.AZURE_AD_TENANT_ID }}    
      TF_CLI_ARGS_init: '-var="env=${{inputs.ENVIRONMENT}}" 
                        -var="client-id=${{inputs.AZURE_AD_CLIENT_ID}}" 
                        -var="tenant-id=${{inputs.AZURE_AD_TENANT_ID}}"
                        -var="subscription-id=${{inputs.AZURE_SUBSCRIPTION_ID}}"
                        -var="resource-group-name=${{inputs.AZURE_RESOURCE_GROUP_NAME}}"
                        -var="location=${{inputs.AZURE_LOCATION}}"
                        -var="service-plan-id=${{inputs.AZURE_SERVICE_PLAN_NAME}}"
                        -var="storage-account-name=${{inputs.AZURE_STORAGE_ACCOUNT_NAME}}"
                      '
    steps:
      # Checkout the repo
      - name: Checkout the repo
        uses: actions/checkout@v3

      # Login to Azure with CLI with Federated with Github
      - name: 'Az CLI Login via OIDC'
        uses: azure/login@v1
        with:
          client-id: ${{ inputs.AZURE_AD_CLIENT_ID }}
          tenant-id: ${{ inputs.AZURE_AD_TENANT_ID }}
          subscription-id: ${{ inputs.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        id: fmt
        shell: bash
        working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        shell: bash
        working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
        run: terraform init
     
      - name: Terraform Plan
        id: plan
        shell: bash
        working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
        run: terraform plan
 
      # Terraform Output
      - name: Terraform Output
        id: output
        shell: bash
        working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
        run: |
          output=$(terraform output storage-account-access-key)
          echo $output



# name: 'Terraform Azure AppService'
 
# inputs:
#   ENVIRONMENT:
#     description: 'Environment Name'
#     required: true
#   AZURE_AD_CLIENT_ID:
#     description: 'Azure Client Id'
#     required: true
#   AZURE_AD_CLIENT_SECRET:
#     description: 'Azure Client Secret'
#     required: true
#   AZURE_AD_TENANT_ID:
#     description: 'Azure Tenant Id'
#     required: true
#   AZURE_LOCATION:
#     description: 'Azure Region/Location'
#     required: true
#   AZURE_SUBSCRIPTION_ID:
#     description: 'Azure Subscription Id'
#     required: true
#   AZURE_RESOURCE_GROUP:
#     description: 'Azure Resource Group'
#     required: true
#   AZURE_RESOURCE_GROUP_NAME:
#     description: 'Azure Resource Group Name'
#     required: true
#   AZURE_SERVICE_PLAN_NAME:
#     description: 'Azure Service Plan nAME'
#     required: true
#   AZURE_STORAGE_ACCOUNT_NAME:
#     description: 'Azure Storage Account Name'
#     required: true

# outputs:
#   storage-account-access-key:
#     description: "storage_account_access_key"
#     value: ${{ steps.output.outputs.storage-account-access-key }}

# runs:
#     using: "composite"
#     steps:
#       # Checkout the repo
#       - name: Checkout the repo
#         uses: actions/checkout@v3

#       - name: Working Dir
#         id: working-dir
#         shell: bash
#         run: echo ./.github/workflows/ci-cd/terraform/azure/appService

#       # Terraform Setup 
#       - uses: hashicorp/setup-terraform@v2

#       # Terraform Format 
#       - name: Terraform Format
#         id: fmt
#         shell: bash
#         working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
#         run: terraform fmt -check
#         #continue-on-error: true

#       # Terraform Init 
#       - name: Terraform Init
#         id: init
#         shell: bash
#         working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
#         run: terraform init 
#         env:
#           ARM_CLIENT_ID: ${{ inputs.AZURE_AD_CLIENT_ID }}
#           ARM_CLIENT_SECRET: ${{ inputs.AZURE_AD_CLIENT_SECRET }}
#           ARM_TENANT_ID: ${{ inputs.AZURE_AD_TENANT_ID }}
#           ARM_SUBSCRIPTION_ID: ${{ inputs.AZURE_SUBSCRIPTION_ID }}
#           TF_CLI_ARGS_init: '-var="env=${{inputs.ENVIRONMENT}}" 
#                               -var="client_id=${{inputs.AZURE_AD_CLIENT_ID}}" 
#                               -var="tenant_id=${{inputs.AZURE_AD_TENANT_ID}}"
#                               -var="subscription_id=${{inputs.AZURE_SUBSCRIPTION_ID}}"
#                               -var="resource_group_name=${{inputs.AZURE_RESOURCE_GROUP_NAME}}"
#                               -var="location=${{inputs.AZURE_LOCATION}}"
#                               -var="service_plan_name=${{inputs.AZURE_SERVICE_PLAN_NAME}}"
#                               -var="storage_account_name=${{inputs.AZURE_STORAGE_ACCOUNT_NAME}}"
#                             '

#       # Terraform Validate 
#       - name: Terraform Validate
#         id: validate
#         shell: bash
#         working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
#         run: terraform validate -no-color

#       # Terraform Plan 
#       - name: Terraform Plan
#         id: plan
#         shell: bash
#         working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
#         run: terraform plan -no-color
#         env:
#           ARM_CLIENT_ID: ${{ inputs.AZURE_AD_CLIENT_ID }}
#           ARM_CLIENT_SECRET: ${{ inputs.AZURE_AD_CLIENT_SECRET }}
#           ARM_TENANT_ID: ${{ inputs.AZURE_AD_TENANT_ID }}
#           ARM_SUBSCRIPTION_ID: ${{ inputs.AZURE_SUBSCRIPTION_ID }}
#           TF_CLI_ARGS_init: '-var="env=${{inputs.ENVIRONMENT}}" 
#                             -var="client_id=${{inputs.AZURE_AD_CLIENT_ID}}" 
#                             -var="tenant_id=${{inputs.AZURE_AD_TENANT_ID}}"
#                             -var="subscription_id=${{inputs.AZURE_SUBSCRIPTION_ID}}"
#                             -var="resource_group_name=${{inputs.AZURE_RESOURCE_GROUP_NAME}}"
#                             -var="location=${{inputs.AZURE_LOCATION}}"
#                             -var="service_plan_name=${{inputs.AZURE_SERVICE_PLAN_NAME}}"
#                             -var="storage_account_name=${{inputs.AZURE_STORAGE_ACCOUNT_NAME}}"
#                             '
#         continue-on-error: true

#       # # Login to Azure with CLI with Federated with Github
#       # - name: 'Az CLI Login via OIDC'
#       #   uses: azure/login@v1
#       #   with:
#       #     client-id: ${{ inputs.AZURE_AD_CLIENT_ID }}
#       #     tenant-id: ${{ inputs.AZURE_AD_TENANT_ID }}
#       #     subscription-id: ${{ inputs.AZURE_SUBSCRIPTION_ID }}

#       # Terraform Apply
#       - name: Terraform Apply
#         id: apply
#         shell: bash
#         working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
#         env:
#           ARM_CLIENT_ID: ${{ inputs.AZURE_AD_CLIENT_ID }}
#           ARM_CLIENT_SECRET: ${{ inputs.AZURE_AD_CLIENT_SECRET }}
#           ARM_TENANT_ID: ${{ inputs.AZURE_AD_TENANT_ID }}
#           ARM_SUBSCRIPTION_ID: ${{ inputs.AZURE_SUBSCRIPTION_ID }}
#         run: terraform apply -auto-approve -no-color
#         continue-on-error: true

#       # Terraform Output
#       - name: Terraform Output
#         id: output
#         shell: bash
#         working-directory: ./.github/workflows/ci-cd/terraform/azure/appService
#         run: |
#           output=$(terraform output storage-account-access-key)
#           echo $output
