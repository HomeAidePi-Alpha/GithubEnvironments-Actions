name: 'Terraform Azure AppService'
 
inputs:
  ENVIRONMENT:
    description: 'Environment Name'
    required: true
  AZURE_AD_CLIENT_ID:
    description: 'Azure Client Id'
    required: true
  AZURE_AD_TENANT_ID:
    description: 'Azure Tenant Id'
    required: true
  AZURE_LOCATION:
    description: 'Azure Region/Location'
    required: true
  AZURE_SUBSCRIPTION_ID:
    description: 'Azure Subscription Id'
    required: true
  AZURE_RESOURCE_GROUP_NAME:
    description: 'Azure Resource Group Name'
    required: true
  AZURE_SERVICE_PLAN_ID:
    description: 'Azure Service Plan Id'
    required: true
  AZURE_STORAGE_ACCOUNT_NAME:
    description: 'Azure Storage Account Name'
    required: true

env:
  WORKING_DIR: ./.github/workflows/ci-cd/terraform/azure/appService

runs:
    using: "composite"
    steps:
      # Checkout the repo
      - name: Checkout the repo
        uses: actions/checkout@v3
 
      # Terraform Setup 
      - uses: hashicorp/setup-terraform@v2

      # Terraform Format 
      - name: 'Terraform Format'
        id: fmt
        shell: bash
        working-directory: {{ env.WORKING_DIR }}
        run: terraform fmt -check
        #continue-on-error: true

      # Terraform Init 
      - name: Terraform Init
        id: init
        shell: bash
        working-directory: {{ env.WORKING_DIR }}
        run: terraform init
        env:
            TF_CLI_ARGS_init: '-var="env=${{inputs.ENVIRONMENT}}" 
                               -var="client-id=${{inputs.AZURE_AD_CLIENT_ID}}" 
                               -var="tenant-id=${{inputs.AZURE_AD_TENANT_ID}}"
                               -var="subscription-id=${{inputs.AZURE_SUBSCRIPTION_ID}}"
                               -var="resource-group-name=${{inputs.AZURE_SUBSCRIPTION_ID}}"
                               -var="location=${{inputs.AZURE_SUBSCRIPTION_ID}}"
                               -var="service-plan-id=${{inputs.AZURE_SUBSCRIPTION_ID}}"
                               -var="storage-account-name=${{inputs.AZURE_SUBSCRIPTION_ID}}"
                              '

      # Terraform Validate 
      - name: Terraform Validate
        id: validate
        shell: bash
        working-directory: {{ env.WORKING_DIR }}
        run: terraform validate -no-color

      # Terraform Plan 
      - name: Terraform Plan
        id: plan
        shell: bash
        working-directory: {{ env.WORKING_DIR }}
        run: terraform plan -no-color
        #continue-on-error: true

      # Terraform Apply
      - name: Terraform Apply
        id: plan
        shell: bash
        working-directory: {{ env.WORKING_DIR }}
        run: terraform apply -no-color
        #continue-on-error: true