name: Create a GitHub Repo, populate base code & create environments

inputs:
  USER_NAME:
    description: 'User Name'
    required: true
  USER_EMAIL:
    description: 'User Email'
    required: true
  GITHUB_ORG_NAME:
    description: 'GitHub Organization Name'
    required: true
  GITHUB_REPO_BRANCH:
    description: 'GitHub Repo Branch Name usually "main" or  "master"'
    required: true
  GITHUB_REPO_NAME:
    description: 'GitHub Repo Name'
    required: true
  GITHUB_REPO_DESCRIPTION:
    description: 'GitHub Repo Description'
    required: true
  GITHUB_REPO_URL:
    description: 'GitHub Repo URL to the .git'
    required: true
  GITHUB_REPO_TOKEN:
    description: 'GitHub Repo Token for Auth'
    required: true
  GITHUB_REPO_FILE_LIST:
    description: 'GitHub Repo File List'
    required: true

env:
  python-version: [ '2.x', '3.x', 'pypy-2.7', 'pypy-3.7', 'pypy-3.8' ]
  environments: ['preprod', 'prod']
  # will need to add/edit/remove api calls below based on changing the environments matrix
  python-architecture: 'x64'
  pulled-from-keyvault : 'secret'
  pulled-from-cyberark : 'secret-shh'
  pulled-from-sql : 'secret-donttell'
  pulled-from-blob : 'secret-psst'
  pulled-from-file : 'secret-hey'
  pulled-from-stream : 'secret-omg'
  pulled-from-queue : 'secret-didjahear'
  pulled-from-service : 'secret-dontask'
  pulled-from-http-webhook-ideal : 'secret-wonttell'
  pulled-from-env-even-better : 'no-secret-found'

runs:
    using: "composite"
    steps:
      # Checkout the repo
    - name: Check out Repo
      uses: actions/checkout@v3
    # Setup Python versions
    - name: Setup Python versions
      uses: actions/setup-python@v3
      with:
        # Semantic version range syntax or exact version of a Python version
        python-version: ${{ env.python-version }}
        # Optional - x64 or x86 architecture, defaults to x64
        architecture: ${{ env.python-architecture }}
    # Printing the current Python version & can perform python to perform file or src move operations in advance of repo creation
    - name: Display Python version & Execute python on the file list
      shell: bash
      run: | 
        python -c "import sys; print(sys.version)"
        python ${{ inputs.GITHUB_REPO_FILE_LIST }}
    # Create a new GitHub repo with gh and use git to push project files
    - name: Create new Github Repo and Push baseline files (any project type)
      shell: bash
      run: |
        git config --global user.name ${{ inputs.USER_NAME }}
        git config --global user.email ${{ inputs.USER_EMAIL }}
        git config --global init.defaultBranch ${{ inputs.GITHUB_REPO_BRANCH }}
        rm -rf .git/
        git init
        git remote add origin "https://${{ inputs.GITHUB_REPO_TOKEN}}@github.com/${{ inputs.GITHUB_ORG_NAME}}/${{ inputs.GITHUB_REPO_NAME}}.git"
        echo "${{ inputs.GITHUB_REPO_TOKEN}}" > .githubtoken
        gh auth login --with-token < .githubtoken
        gh repo create ${{ inputs.GITHUB_ORG_NAME}}/${{ inputs.GITHUB_REPO_NAME}} --public
        gh api --method PUT -H "Accept: application/vnd.github.v3+json" /repos/${{ inputs.GITHUB_ORG_NAME}}/${{ inputs.GITHUB_REPO_NAME}}/environments/preprod
        gh api --method PUT -H "Accept: application/vnd.github.v3+json" /repos/${{ inputs.GITHUB_ORG_NAME}}/${{ inputs.GITHUB_REPO_NAME}}/environments/prod
        git add README.md
        git add docs
        git add workflows/phase1-alpha-python-executed.yaml
        git mv workflows/phase1-alpha-python-executed.yaml .github/workflows/phase1-alpha-python-executed.yaml
        git add workflows/quality-codeql.yaml
        git mv workflows/quality-codeql.yaml .github/workflows/quality-codeql.yaml
        git add workloads
        git mv workloads .github/workflows
        git commit -m "initial alpha checkin"
        git push -f origin ${{ inputs.GITHUB_REPO_BRANCH }}
