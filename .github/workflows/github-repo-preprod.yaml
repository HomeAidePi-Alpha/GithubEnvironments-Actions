name: Create a GitHub Repo, populate code, create secrets, docs & wiki, & ci-cq-cd (test for quality and check standards)

# This will run when kicked off manually or by trigger
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'preprod'
      user_name:
        description: 'User Name'
        required: true
        default: 'Vandy'
      user_email:
        description: 'User Email'
        required: true
        default: 'matthew.vandergrift@homeaidepi.com'
      branch:
        description: 'GitHub Repo Branch'
        required: true
        default: 'main'
      org_name:
        description: 'GitHub Org Name'
        required: true
        default: 'HomeAidePi-Alpha'
      repo_name:
        description: 'GitHub Repo Name'
        required: true
        default: 'GitHubEnvironments-Alpha'
      token:
        description: 'A Token'
        required: true
        default: ''
      teams_webhook:
        description: 'Teams Webhook'
        required: false
        default: ''
      slack_webhook:
        description: 'Slack Webhook'
        required: false
        default: ''

jobs:
  build:
    name: Build
    timeout-minutes: 3
    strategy:
      matrix:
        os: [ubuntu-latest]
    # todo implement quality strategy after tiger team committee approval
    # package:
    #   - coding-standard
    #   - lint-rules (eslint, flake8)
    #   - commit-guidelines
    #   - pull-request-peer-review
    #   - quality-check
    runs-on: ${{ matrix.os }}

    environment: ${{ github.event.inputs.ENVIRONMENT }}

    # todo Implement principle of least priv based on need
    permissions:
      contents: 'write'
      id-token: 'write'
      issues: 'write'
      actions: 'write'
      deployments: 'write'
      repository-projects: 'write'
    steps:
    # Checkout the repo
    - name: Check out Repo
      uses: actions/checkout@v3
    # Create a GitHub Repo, populate base code
    - uses: ./.github/workflows/github/repo
      with:
          USER_NAME: ${{ github.event.inputs.user_name }}
          USER_EMAIL: ${{ github.event.inputs.user_email }}
          GITHUB_REPO_TOKEN: ${{ github.event.inputs.token }}
          GITHUB_REPO_BRANCH: ${{ github.event.inputs.branch }}
          GITHUB_REPO_NAME: ${{ github.event.inputs.repo_name }}
          GITHUB_ORG_NAME: ${{ github.event.inputs.org_name }}

  deploy:
    name: Deploy
    needs: build
    timeout-minutes: 3
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    environment: ${{ github.event.inputs.ENVIRONMENT }}
    # todo Implement principle of least priv based on need
    permissions:
      contents: 'write'
      id-token: 'write'
      issues: 'write'
      actions: 'write'
      deployments: 'write'
      repository-projects: 'write'

    steps:
    # Checkout the repo
    - name: Check out Repo
      uses: actions/checkout@v3
      
    - uses: ./.github/workflows/github/environment
      with:
          ENVIRONMENT:  ${{ github.event.inputs.environment }}
          GITHUB_REPO_TOKEN: ${{ github.event.inputs.token }}
          GITHUB_REPO_BRANCH: ${{ github.event.inputs.branch }}
          GITHUB_REPO_NAME: ${{ github.event.inputs.repo_name }}
          GITHUB_ORG_NAME: ${{ github.event.inputs.org_name }}
          PULLED_FROM_KEYVAULT: ${{ secrets.PULLED_FROM_KEYVAULT }}
          PULLED_FROM_CYBERARK: ${{ secrets.PULLED_FROM_CYBERARK }}
          PULLED_FROM_SQL: ${{ secrets.PULLED_FROM_SQL }}
          PULLED_FROM_BLOB: ${{  secrets.PULLED_FROM_BLOB }}
          PULLED_FROM_FILE: ${{  secrets.PULLED_FROM_FILE }}
    # PULLED_FROM_QUEUE: ${{ secrets.PULLED_FROM_QUEUE }}
    # PULLED_FROM_STREAM: ${{ secrets.PULLED_FROM_STREAM }}
    # PULLED_FROM_HTTP: ${{ secrets.PULLED_FROM_HTTP }}
    # PULLED_FROM_SERVICE: ${{ secrets.PULLED_FROM_SERVICE }}

  chat-ops:
    name: Notify
    depends: [build,deploy]
    timeout-minutes: 3
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    environment: ${{ github.event.inputs.ENVIRONMENT }}

    # todo Implement principle of least priv based on need
    permissions:
      contents: 'write'
      id-token: 'write'
      issues: 'write'
      actions: 'write'
      deployments: 'write'
      repository-projects: 'write'

    steps:
    # Checkout the repo
    - name: Check out Repo
      uses: actions/checkout@v3

    # Send a chat ops notification depending on teams or slack
    - uses: ./.github/workflows/chatops/teams
      with:
          MESSAGE: 'Environment: ${{  github.event.inputs.environment }} deployment completed for commit: ${{ github.sha }}'
          TEAMS_WEBHOOK: ${{ github.event.inputs.teams_webhook }}

    # Send a chat ops notification depending on slack
    - uses: ./.github/workflows/chatops/slack
      with:
          SLACK_USERNAME: ${{ github.event.inputs.user_name }}
          SLACK_WEBHOOK: ${{ github.event.inputs.slack_webhook }}
          SLACK_CHANNEL: general
          SLACK_COLOR: 'good' # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://github.com/HomeAidePi-Alpha/GithubEnvironments-Actions/blob/main/docs/bear-cavalry.png?size=48
          SLACK_MESSAGE: ':rocket: Environment: ${{  github.event.inputs.environment }} deployment completed for commit: ${{ github.sha }}'
          SLACK_TITLE: 'CI/CQ/CD Completed' 
          

  # todo Perform quality checks & standards here

  # Run a shared workflow on the newly minted repo
  # exec-shared-workflow:
  #   name: Exec-Alpha
  #   needs: [build,deploy]
  #   timeout-minutes: 3
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #   runs-on: ${{ matrix.os }}
  #   environment: 'preprod'
  #   # todo Implement principle of least priv based on need
  #   permissions:
  #     contents: 'write'
  #     id-token: 'write'
  #     issues: 'write'
  #     actions: 'write'
  #     deployments: 'write'
  #     repository-projects: 'write'
  #   steps:
  #   - uses: https://github.com home/${{ github.event.inputs.repo_name }}/.github/workflows/phase1-alpha-python-executed.yaml@${{ github.event.inputs.branch }}
  #     with:
  #       secrets:
  #         PULLED_FROM_KEYVAULT: ${{ secrets.PULLED_FROM_KEYVAULT }}
  #         PULLED_FROM_CYBERARK: ${{ secrets.PULLED_FROM_CYBERARK }}
